#+title: 1DL251: Software Engineering and Project Management

Note: because [[http://studentportalen.uu.se][Studentportalen]] is being decommissioned, I have
elected to *not* use it for this instalment of the course. I see
no reason to invest time in learning tools that will not be usable
more than once.

* Reading Material
** Course Book
To ensure a broad coverage of a wide variety of topics, the course
uses Ian Sommerville's book [[http://software-engineering-book.com/][Software Engineering]] (10th
edition). Don't buy older editions as the field moves forward rapidly.

** Additional Books
These are books that will be a great source of knowledge for the
various teams. I will suggest for teams to purchase or borrow some of
these. (The book list is unordered. Numbers are for ease of reference.)

1. Managing the Unmanageable: Rules, Tools, and Insights for Managing Software People and Teams by Mickey W. Mantle and Ron Lichty
2. Peopleware: Productive Projects and Teams (3rd Edition) by Tom DeMarco and Tim Lister
3. The Mythical Man-Month: Essays on Software Engineering by Frederic P. Brooks Jr.
4. Software Requirements by Karl Wiegers and Joy Beatty
5. Code Complete: A Practical Handbook of Software Construction by Steve McConnell
6. The Pragmatic Programmer: From Journeyman to Master by Andrew Hunt and David Thomas
7. The Best Software Writing I by Joel Spolsky (Editor)
8. The Cathedral & the Bazaar: Musings on Linux and Open Source by an Accidental Revolutionary by Eric S. Raymond
9. Software Architecture in Practice, by Len Bass, Paul Clements and Rick Kazman
10. Code Quality: The Open Source Perspective, by Diomidis Spinellis
11. The Art of Readable Code, by Dustin Boswell and Trevor Foucher

** Additional Material
Papers, blog posts, etc. will be listed here.

I recommend that you subscribe to [[http://www.se-radio.net/][Software Engineering Radio]]. There
are several great episodes that directly relate to things we will
cover in class, and many more to things we will not cover.

* Lectures
There are no mandatory lectures. Any lecture notes will be made
available [[lectures][here]]. I suggest that the class discusses how to ensure class
notes are made, and publish in this GitHub repo.

All lecture information is posted [[lectures][here]]. Expect the full lecture
planning to be ready in time for Lecture 3, after we know more
about what will be covered by the seminars (see below).

* Seminars
Seminars are mandatory. Failure to attend a seminar must be
compensated through other means. What that means in practise will
depend on the seminar, and how each team chooses to run a seminar.
/In the very least, it will mean answering an extra requirement at
the exam./

Each seminar is /two hours/. Thus, four-hour slots in the schedule
represent /two/ seminars running back-to-back.

There is *one* exception: [[seminars/seminar-01.org][seminar one]] is run /twice/ back-to-back with
only half of the class present.

In Spring 2018, I expect there to be about nine seminars on the course.

* How to Interact with the Teaching Staff
There are three channels of communication for this course, /none
of which is email/. Because of the volume of email that I am
getting these days, *email is a lossy channel* for me.

Note that I will use email via the Student Portal to broadcast
information when needed.

** GitHub
All information from teachers, all teams' projects, individual
work etc. will be posted and/or handed in via GitHub. As you are
reading this, you already have the link here. We will use GitHub
features such as issues, pull requests and projects to manage the
course, and communicate.

** Slack Workspace
A Slack Workspace exists for quick interaction:
[[http://1dl251.slack.com][http://1dl251.slack.com]]. I recommend installing a desktop app and a
mobile app for Slack, but maybe I'm just too old school.

I encourage each team to create their own channels on this Slack
workspace. Feel free to invite me to channels too.

** Physical Meetings
I will try to predominently schedule physical meetings in conjunction
with lectures and seminars. My office is 1356 and while I am there
most days, my schedule is a bit erratic and I run around quite a bit.
I recommend finding me on slack to confirm availability and
suitability before showing up.

* Credits and Examination
** ECTS Credits (Högskolepoäng)
This course is worth 5 HP (ECTS credits), distributed like this:

1. 2 HP for the /exam/
2. 3 HP for the /project/

The final grade will be controlled by the exam.

** The Project

Students will be divided into groups of about 4 students. Each
group will pick a topic from the course syllabus, and investigate
it deeply. How you choose to conduct your investigation is up to
you. Consult research papers, books, government reports, conduct
interviews, etc. Based on this investigation:

1. formulate /learning objectives/ for the other students on the course;
2. design a means to do /knowledge transfer/ to the other students (e.g. through a seminar);
3. design a method to /assess/ that students fulfil the learning objectives;
4. /execute the knowledge transfer/ (e.g., run a seminar);
5. /carry out assessment/ (e.g., on the seminar, or as part of the course exam); and based on all the activities above
6. write a /post-mortem report/ on your process.

Steps 1--5.) above must be carried out in order. Ideally, you make
notes for 6.) continuously, but carry out the bulk of the work
last.

The seminar slots on the course are intended for your performing
of 4.) and 5.) above, but just because they are called seminars in
the schedule, they need not be performed as such. For example, if
you want to record a video lecture, "force" students to view it,
and then run a flipped-classroom style exercise as assessment,
that would work just fine. *Be creative.*

Each student is supposed to spend 80 hours (the equivalent of 3
HP) on this part of the course, meaning that a team of four
students should spend 320 hours. It is expected that a significant
portion of time is spent on communication and coordination.

The remaining 53 hours of the course are supposed to be spent on
attending and preparing for lectures and seminars.

*** Deliverables
During the project, I expect the following hand-ins.

1. A written pitch of learning outcomes
2. A written pitch of knowledge transfer event and corresponding assessment
3. A written account of the assessment of all students with results
4. Post mortem report

*All of the above are to be handed in through GitHub.* You are
allowed to use any plain text format that is rendered in the
GitHub interface, such as GitHub-flavoured markdown, or org-mode.
Don't upload Word or PDF documents and expect them to be read.

While I will strive to respond immediately, you should expect a
response time of 48 hours on pitches. Avoiud putting yourself in a
position where you end up blocking for a reply from me.

*** Examination during the project
The head teacher or a teaching assistant will supervise all
knowledge transfer seminars, and are ultimately responsible to
make sure that each team covers a relevant topic, the quality of
the learning objectives, the quality of the knowledge transfer and
the assessment. For example, if one group does a terrible job on
requirements engineering, it will be the head teacher's job to
compensate and ensure that requirements engineering is still
covered to a suitable extent in the course.

** The Exam
The exam will be carried out in the form of a /take-home exam/.
That means that you will be judged on your abilities to express
yourself clearly and correctly in written form, in addition to the
subject of the course.

First, note that a student that attended all different teams
knowledge transfer events and passed all corresponding assessments
*automatically passes exam*. Each missed knowledge transfer event
and/or failed assessment adds a corresponding requirement on the
exam. There may or may not be a 1-1 mapping between requirements
and exam questions.

The take-home exam is only open to students who actively
participated in the course in 2018. Old students will instead do
an exam following previous instalments of this course.
